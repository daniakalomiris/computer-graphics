#version 330 core

in vec2 vertexUV;
in vec3 Normal;
in vec3 FragPos;

uniform vec3 vertexColor;
uniform sampler2D textureSampler;
uniform bool isTextured = false;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;

out vec4 FragColor;

void main()
{

    // ambient
    float ambientStrength = 0.15;
    vec3 ambient = ambientStrength * lightColor;

     // diffuse
     vec3 norm = normalize(Normal);
     vec3 lightDir = normalize(lightPos - FragPos);
     float diff = max(dot(norm, lightDir), 0.0);
     vec3 diffuse = diff * lightColor;
     
     // specular
     float specularStrength = 1.0;
     vec3 viewDir = normalize(viewPos - FragPos);
     vec3 reflectDir = reflect(-lightDir, norm);
     float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
     vec3 specular = specularStrength * spec * lightColor;

     vec3 result = (ambient + diffuse + specular);
     vec4 textureColor = texture(textureSampler, vertexUV);

     if (isTextured)
        FragColor = textureColor * vec4(result, 1.0f);
     else
        FragColor =  vec4(result * vertexColor, 1.0f);
}
 
   

